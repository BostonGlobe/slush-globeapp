//=======================
// Debugger
//=======================
// Debugger helps you find errors in semantics accessibility, and functionality
// in your HTML. Elements that can have pseudo `:before` and `:after` will show 
// the error message on hover.

// Thanks to Ire Aderinokun, Eric Bailey, and diagnostic.css for the idea
// and many of the examples noted in this document



// Helpers/Base
// ============================================
// Base style and mixin for visually showing errors and warnings.
// Errors are definitely things to fix.
// Warnings are suggestions (which can be ignored) or *possible* errors

$error-color = #ee7785
$warning-color = #efdc05

debug(type, message = null, hover = on)
	if type == error
		outline 3px solid $error-color !important
	if type == warning
		outline 3px solid $warning-color !important
	if message
		&:before
			if type == error
				content 'Error: ' + message
				background-color $error-color
			if type == warning
				content 'Warning: ' + message
				background-color $warning-color
			display block
			position fixed
			width 10rem
			right 0
			bottom 50%
			color #333
			font-family 'Helvetica Neue', Helvetica, Arial, sans-serif
			font-weight bold
			font-size 1rem
			padding 0.5em 1em
			if hover == on
				transform translateX(100vh)
				transition transform 0.35s ease-in-out
		if hover == on
			&:hover:before, &:focus:before
				transform translateX(0)


// HTML/Meta things
// ============================================

// Missing HTML doc languages may result in a screenreader reading your site 
// in an amazing french accent. I love it. A lot of other people don't.
html:not([lang]), html[lang=""]
	display block
	debug(error, 'No set html doc language', hover = off)

// There are a few other items to note that cannot be visually displayed:

// Make sure you're calling a meta charset. And make sure that charset is
// set to UTF-8. Ideally, you'd like this meta attribute to be the first
// child element in your `head`.

// Don't make your meta viewport attributes inaccessible for users who would
// like to shrink and zoom. Be sure to remove any attributes that set
// maximum and minium scale. And also don't include "user-scalable=no".


// Inline styles
// ============================================

// Sometimes you need inline styles, especially if you're using JS
// to manipulate them. Just a warning to check :)
[style]:not([style=""])
	debug(warning, 'Avoid inline styles if possible')


// Links
// ============================================

// Empty or no href attribute
a:not([href]), a[href=""]
	debug(error, 'Link without (or empty) href attribute')

// Questionable href attribute
a[href="#"], a[href^="javascript"]
	debug(warning, 'Link with questionable href attribute')


// Images 
// ============================================

// No alt tag
img:not([alt])
	debug(error)

// Empty alt tag: only a warning as sometimes empty tags are included
// to allow a screenreader to skip decorative image content.
img[alt=""]
	debug(warning)

// Inline SVGs
// ============================================
// Unless the svg is decorative, make sure it is screen-readable. If it is
// decorative, add the `aria-hidden='true'` attribute and value.
svg:not([aria-labelledby])
	debug(warning)

// SVGs should always have a role. Most of that time, it'll be `role='img'`
svg:not([role])
	debug(error)

// Elements and Attributes
// ============================================
// Emtpy elements. Excludes self-closing elements.
*:empty:not(br):not(embed):not(hr):not(img):not(input):not(param):not(source):not(track):not(wbr)
	debug(warning, 'Empty element')

// Frequently misused elements
b
	debug(warning, 'You may want to use the `strong` element. Check semantics.')
i
	debug(warning, 'You may want to use the `em` element. Check semantics.')
s
	debug(warning, 'You may want to use the `del` element. Check semantics.')

// Deprecated elements
acronym, applet, basefont, bgsound, big, center, dir, font, frame, frameset, isindex, listing, multicol, nextid, nobr, noembed, noframes, plaintext, rb, spacer, strike, tt, u, xmp, marquee, blink
	debug(error, 'This element is deprecated')

// Deprecated attributes
link[rev], a[rev], link[charset], a[charset], a[shape], a[coords], img[longdesc], iframe[longdesc], link[target], area[nohref], head[profile], html[version], img[name], meta[scheme], object[archive], object[classid], object[codebase], object[codetype], object[declare], object[standby], param[valuetype], param[type], td[axis], t[axist], td[abbr], t[abbr], td[scope], [align], body[alink], body[vlink], body[text], body[background], [bgcolor], object[border], table[border], [cellpadding], [cellspacing], col[char], colgroup[char], tbody[char], td[char], tfoot[char], th[char], tr[char], col[charoff], colgroup[charoff], tbody[charoff], td[charoff], tfoot[charoff], th[charoff], tr[charoff], br[clear], dl[compact], menu[compact], ol[compact], ul[compact], table[frame], iframe[frameborder], img[hspace], object[hspace], img[vspace], object[vspace], iframe[marginheight], iframe[marginwidth], hr[noshade], li[type], ol[type], ul[type], [valign], hr[width], table[width], td[width], th[width], colgroup[width], pre[width]
	debug(error, 'This attribute is deprecated')

// Inline event attributes. Try not to use 'em
[onafterprint], [onbeforeprint], [onbeforeunload], [onerror], [onhaschange], [onload], [onmessage], [onoffline], [ononline], [onpagehide], [onpageshow], [onpopstate], [onredo], [onresize], [onstorage], [onundo], [onunload], [onblur], [onchage], [oncontextmenu], [onfocus], [onformchange], [onforminput], [oninput], [oninvalid], [onreset], [onselect], [onsubmit], [onkeydown], [onkeypress], [onkeyup], [onclick], [ondblclick], [ondrag], [ondragend], [ondragenter], [ondragleave], [ondragover], [ondragstart], [ondrop], [onmousedown], [onmousemove], [onmouseout], [onmouseover], [onmouseup], [onmousewheel], [onscroll], [onabort], [oncanplay], [oncanplaythrough], [ondurationchange], [onemptied], [onended], [onerror], [onloadeddata], [onloadedmetadata], [onloadstart], [onpause], [onplay], [onplaying], [onprogress], [onratechange], [onreadystatechange], [onseeked], [onseeking], [onstalled], [onsuspend], [ontimeupdate], [onvolumechange], [onwaiting]
	debug(error, 'Definitely donâ€™t use inline event attributes')
	

// Form and input elements
// ============================================
// Give inputs a type
input:not([type])
	debug(error)

// Make sure textareas have rows and cols
textarea:not([rows]):not([cols])
	debug(error)

// All forms should have names as screenreaders use this in
// the absence of labels (but make sure you have a label!)
input:not([name]), input[name=""],
select:not([name]), select[name=""],
textarea:not([name]), textarea[name=""]
	debug(error)

// Submit inputs need a value to define button text
input[type="submit"]:not([value]),
input[type="submit"]:not([name]):not([value])
	debug(error)

// All inputs need an id to associate it with a label
input:not([id]), select:not([id]), textarea:not([id])
	debug(error)

// All labels need a for to associate it with an input
label:not([for]), label[for=""]
	debug(warning, 'Missing for attribute')

// Forms should use name and id attributes
form:not([name]):not([id])
	debug(error)


// Print styles
// ============================================
// Be sure to hide form elements in print styles
@media print
	form
		debug(error)


// Tables
// ============================================
// Unfortunately there's no way to target parent selectors based on an
// element's children in CSS yet (but `:has` is being considered). In the
// meantime, WebAIM has a handy tutorial on marking up accessible tables: 
// http://webaim.org/techniques/tables/data
// TL;DR is include a caption and `th` elements

// Tables with complex data *may* need a summary attribute.
// If both a caption and summary are provided, the summary should not duplicate the caption.
table:not([summary])
	debug(warning, 'Table may need a summary if data is complex')